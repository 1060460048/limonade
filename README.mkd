# Limonade

Limonade est un micro framework PHP qui permet le prototypage et le développement rapide d'applications web.

Prenant son inspiration de frameworks tels que [Sinatra](http://www.sinatrarb.com/) ou [Camping](http://github.com/why/camping/tree/master) en Ruby, ou encore  [Orbit](http://orbit.luaforge.net/) en Lua, il se veut simple, léger et d'un usage extrêmement souple.

Limonade met en oeuvre un ensemble de fonctions complémentaires à l'API de base de PHP, en cohérence avec celle-ci, tout en se reposant au maximum sur ses fonctions natives. 

Les fonctions mises à disposition par Limonade sont assimilables extrêmement rapidement, et fournissent tout ce qu'on est en droit d'attendre d'un framework moderne ( MVC, REST, ...).


    require_once 'lib/limonade.php'
    dispatch('/', 'hello');
        function hello()
        {
            return 'Hello world!';
        }
    run();
    
## Routes ##

Dans Limonade, les routes associent une méthode HTTP et un masque de recherche à une fonction.

    dispatch('/', 'my_get_function');
    # identique à dispatch_get('my_get_function');
        function my_get_function()
        {
            // Show something
        }
    
    dispatch_post('/', 'my_post_function'); 
        function my_post_function()
        {
            // Create something
        }
        
    dispatch_update('/', 'my_update_function'); 
        function my_update_function()
        {
            // Update something
        }
        
    dispatch_delete('/', 'my_delete_function'); 
        function my_delete_function()
        {
            // Delete something
        }
        
Les routes sont testées dans l'ordre dans lequel elle sont déclarées. Le chemin auquel les routes sont comparées peut être passé de plusieurs manière via l'url:

    http://localhost/my_app/?u=/my/path
    http://localhost/my_app/?uri=/my/path
    http://localhost/my_app/index.php?/my/path
    http://localhost/my_app/index.php/my/path
    http://localhost/my_app/?/my/path
    
*[TODO]: url rewriting*

Les masque peuvent contenir des paramètres nommés, dont la valeur seront ensuite accessible via la fonction `params()`

    dispatch('/hello/:name', 'hello');
        function  hello()
        {
            $name = params('name');
            return 'Hello $name';
        }

Les masques peuvent également contenir des caractères joker. Les valeur correspondante seront accessibles via des index qui suivent leur ordre dans le masque.

    dispatch('/writing/*/to/*', 'my_letter');
        function my_letter()
        {
            # Matches /writing/an_email/to/joe
            $type = params(0); # "an_email"
            $name = params(1); # "joe"
            # ...
        }
        
    dispatch('/files/*.*', 'share_files');
        function share_files()
        {
            # matches /files/readme.txt
            $ext = params(1);
            $filename = params(0).".".$ext;
            # ...
        }
        
Contrairement au caractère joker simple `*`, le double caractère joker `**` permet de spécifier une chaîne de caractères qui peut comporter un `/`

    dispatch('/files/**', 'share_files')
        function share_files()
        {
            # Matches /files/my/own/file.txt
            $filename = params(0); # my/own/file.txt
        }

Le masque peut également être une expression régulière s'il commence par `^`

    dispatch('^/my/own/(\d+)/regexp', 'my_func');
        function my_func()
        {
            # matches /my/own/12/regexp
            $num = params(0);
        }
        
On peut également nommer les paramètres joker et les captures d'expression régulière en passant un tableau contenant les noms désirés.

    dispatch(array('/say/*/to/**', array("what", "name")), 'my_func');
        function my_func()
        {
            # Matches /say/hello/to/joe
            $what = params('what');
            $name = params('name');
        }
    
Les fonctions appelées par les routes peuvent être écrites n'importe où avant l'éxécution de la fonction `run()`. Elles peuvent également être regroupées dans des fichiers controlleurs rangés dans un dossier `controllers/`.

    /                   # site root
     - index.php        # file with routes declarations and run()
     + controllers/
         - blog.php     # functions for blog blog_index(), blog_show(),
                        #  blog_post()...
         - comments.php # comments_for_a_post(), comment_add()...

L'emplacement de ce dossier est modifiable grâce à l'option `controllers_dir`

    option('controllers_dir', dirname(__FILE__).'/other/dir/for/controllers');


## Vues et templates ##

dossier, option

set, variables dans les vues

layout

### Templates HTML ###

### Templates JSON ###

### Templates XML ###

### Templates TXT ###

### Servir des fichiers ###

### Captures ###

content-for...








        